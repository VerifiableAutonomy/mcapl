<?xml version="1.0" ?>

<!--
  build.xml - generic JPF extension build script
              using Ant (http://jakarta.apache.org/ant)
  public targets:
    
    compile           compile JPF and its specific (modeled) environment libraries
    test              run all JPF tests
    jar               build JPF jar files
    dist              build binary distribution
    clean             remove the files that have been generated by the build process
-->

<project name="ajpf" default="compile" basedir=".">

  <!-- ========================== COMMON SECTION ========================== -->

  <!-- 
    local props have to come first, because Ant properties are immutable
    NOTE: this file is local - it is never in the repository!
  -->
  <property file="local.properties"/>
  
  <!-- this is where we get the 'jpf.core' location from -->
  <property file="${user.home}/.jpf/site.properties"/>

  <!-- if there is none, default to a 'jpf-core' peer dir -->
  <property name="jpf-core" value = "../jpf-core"/>

  <!-- get the jpf-core path properties -->
  <property file="${jpf-core}/jpf.properties"/>


  <!-- compiler settings -->
  <property name="src_level"     value="7"/>
  <property name="debug"         value="on"/>
  <property name="deprecation"   value="on"/>


  <!-- generic classpath settings -->
  <path id="lib.path">

    <!-- our own classes and libs come first -->
    <pathelement location="bin"/>
  	
  	<!-- Changing from default JPF configuration to something that will hopefully
  	      better match up with the Eclipse development environemnt -->
    <!-- <pathelement location="build/main"/>
    <pathelement location="build/examples"/> -->
    <!-- we don't have these
    <pathelement location="build/peers"/>
    -->
    <!-- <pathelement location="build/annotations"/> -->

    <fileset dir=".">
  	    <include name="lib/3rdparty/pccomm.jar"/>
  	    <include name="lib/3rdparty/bluecove.jar"/>
  	<!--    <include name="lib/3rdparty/jpf.jar"/> -->
 	    <include name="lib/3rdparty/junit-4.10.jar"/>
   </fileset>

    <!-- add in what we need from the core -->
    <pathelement path="${jpf-core.native_classpath}"/>

  </path>

  <!-- init: common initialization -->
  <target name="-init">
    <tstamp/>

    <mkdir dir="bin"/>               <!-- the build root -->

    <!-- the things that have to be in the classpath of whatever runs Ant -->
    <available property="have_javac" classname="com.sun.tools.javac.Main"/>
    <fail unless="have_javac">no javac found</fail>


    <available file="src/main"        type="dir" property="have_main"/>
    <available file="src/peers"       type="dir" property="have_peers"/>
    <available file="src/classes"     type="dir" property="have_classes"/>
    <available file="src/tests"       type="dir" property="have_tests"/>
    <available file="src/examples"    type="dir" property="have_examples"/>

  </target>


  <!-- ======================= COMPILE SECTION ============================= -->
    
  <!-- public compile -->
  <target name="compile" depends="-init,-compile-main,-compile-peers,-compile-classes,-compile-tests,-compile-examples"
          description="compile all AJPF sources" >
  </target>

   <target name="-compile-ajpf-classes" if="have_classes" >
  	<mkdir dir="bin/ajpf"/>
  	<javac srcdir="src/classes/ajpf" destdir="bin"
 	       includeantruntime="false"
           debug="${debug}" source="${src_level}" deprecation="${deprecation}">
      <classpath>
        <path refid="lib.path"/>
        <pathelement location="bin"/>
      </classpath>
    </javac>
  </target>

   <target name="-compile-ail-classes" if="have_classes" depends="-compile-ajpf-classes">
  	<mkdir dir="bin"/>
  	<javac srcdir="src/classes/ail" destdir="bin"
 	       includeantruntime="false"
           debug="${debug}" source="${src_level}" deprecation="${deprecation}">
      <classpath>
        <path refid="lib.path"/>
        <pathelement location="bin"/>
      </classpath>
    </javac>
  </target>
  
  <target name="-compile-main" if="have_main" depends="-compile-ail-classes">
    <mkdir dir="bin"/>
    <javac srcdir="src/main" destdir="bin"
 	       includeantruntime="false"
           debug="${debug}" source="${src_level}" deprecation="${deprecation}">
      <classpath>
        <path refid="lib.path"/>
        <pathelement location="bin"/>
      </classpath>
    </javac>
  </target>

  
  <target name="-compile-peers" if="have_peers" depends="-compile-main,-compile-classes" >
    <mkdir dir="bin"/>
    <javac srcdir="src/peers" destdir="bin"
 	       includeantruntime="false"
           debug="${debug}" source="${src_level}" deprecation="${deprecation}"
           classpathref="lib.path"/>
  </target>

  <target name="-compile-classes" if="have_classes" depends="-compile-main">
    <mkdir dir="bin"/>
    <javac srcdir="src/classes" destdir="bin"
 	       includeantruntime="false"
           debug="${debug}" source="${src_level}" deprecation="${deprecation}">
      <classpath>
        <path refid="lib.path"/>
        <pathelement location="bin"/>
      </classpath>
    </javac>
  </target>

  <target name="-compile-tests" if="have_tests" depends="-compile-main,-compile-examples">
    <mkdir dir="bin"/>
    <javac srcdir="src/tests" destdir="bin"
           debug="${debug}" source="${src_level}" deprecation="${deprecation}"
 	        includeantruntime="false"
        	classpathref="lib.path"/>
   </target>

  <target name="-compile-examples" if="have_examples" depends="-compile-main">
    <mkdir dir="bin" />
    <javac srcdir="src/examples" destdir="bin"
     	   includeantruntime="false"
           debug="${debug}" source="${src_level}" deprecation="${deprecation}"
           classpathref="lib.path"/>
  </target>

  
  <!-- ======================= MISC SECTION ================================ -->
  
	<target name="build" depends="compile,test"
	        description="compile and run tests" >
	</target>

	
  <!-- public clean: cleanup from previous tasks/builds -->
  <target name="clean">
    <delete dir="bin" />
    <delete>
      <fileset dir="." includes="**/*~" defaultexcludes="no" />
      <fileset dir="." includes="**/*.bak" defaultexcludes="no" />
      <fileset dir="." includes="**/error.xml" />
    </delete>
  </target>
  


  <!-- ======================= TEST SECTION ================================ -->

  <target name="test" depends="compile"
          description="compile and run core regression tests" if="have_tests">

    <property name="junit.usefile" value="true"/>

    <junit printsummary="on" showoutput="off" haltonfailure="yes"
           fork="yes" forkmode="perTest" maxmemory="1024m">
      <formatter type="plain" usefile="${junit.usefile}"/>

      <classpath>
        <path refid="lib.path"/>

        <pathelement location="bin"/>
 
      </classpath>

        <batchtest todir="bin">
          <fileset dir="bin">
            <include name="**/*Tests.class"/>
          </fileset>
        </batchtest>

    </junit>
   
  </target>

  
</project>

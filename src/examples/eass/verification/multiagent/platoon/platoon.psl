// ----------------------------------------------------------------------------
// Copyright (C) 2015 Louise A. Dennis, Michael Fisher, Maryam Kamali, Owen McAree 
// and Sandor Veres
// 
// This file is part of the Engineering Autonomous Space Software (EASS) Library.
// 
// The EASS Library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3 of the License, or (at your option) any later version.
// 
// The EASS Library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with the EASS Library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
// 
// To contact the authors:
// http://www.csc.liv.ac.uk/~lad
//
//----------------------------------------------------------------------------

full_model: [] ~B(follower3, bad)

agr_safety_verified_1min:[]~ItD(follower3, send(leader, 1, message(follower3, 1, follower1))) 
		-> []~B(follower3, join_agreement(follower3, follower1))
		
agr: [] G(follower3, platoon_m(follower3, follower1)) & 
	 (
		[] ItD(follower3, send(leader, 1, message(follower3, 1, follower1))) 
		->
		<>B(follower3, join_agreement(follower3, follower1))
	)

check_joining_path: G(follower3, platoon_m(follower3, follower1)) & 
					( [] D(follower3, perf(join_ok(1))) -> <> B(follower3, changed_lane) ) &
					( [] D(follower3, perf(speed_controller(1))) -> <> B(follower3, initial_distance) )
					->
					<> B(follower3, platoon_m)

	
check_failure: G(follower3, platoon_m(follower3, follower1)) & 
		( [] D(follower3, perf(join_ok(1))) -> <> B(follower3, changed_lane) )
		->
		<> B(follower3, platoon_m)
		
change_lanefailsuccess: [] G(follower3, platoon_m(follower3, follower1)) & 
						(
						[] D(follower3, perf(join_ok(1)))
						->
						(<> G(follower3, speed_controller(1)) || []~B(follower3, changed_lane) )
						)

set_space_verified_in6h:19:54: [] G(follower3, leave_platoon) & 
		   (
		   [] ~ItD(follower3, send(leader, 1, message(follower3, 0))) ->
		   [] ~ItD(leader, send(follower3, 1, leave_agreement(follower3)))	
		   )	
		   	
go_check_verified: [] ( G(follower3, leave_platoon)
				-> ~G(follower3, platoon_m(follower3, follower1))  )

communication_check: []( ItD(follower3, send(leader, 1, message(follower3, 1, follower1)))
					->
					<>ItD(leader, send(follower3, 1, join_agreement(follower3, follower1))) 
					)

com_leaving: []( ( ItD(follower3, send(leader, 1, message(follower3, 0))) &
				~B(follower3, leave_agreement(follower3))
				)
			->
			<>G(follower3, set_spacing(17))
			)					
					
leave_com_for_agr:  []( (G(follower3, leave_platoon) & 
						~B(follower3, leave_agreement(follower3))  
					)
					->
					<>B(follower3, ack_spacing(17))
					)

req1_1: G(follower3, platoon_m(follower3, follower1))
		&
		[] (ItD(follower3, send(leader, 1, message(follower3, 1, follower1))) -> <>B(follower3, join_agreement(follower3, follower1)))
		&
		~B(follower3, changed_lane)
		->
		<>D(follower3, perf(join_ok(1)))  

					
					
					
multiagent_join: [] (G(follower3, platoon_m(follower3, follower1)) & ~B(follower3, join_agreement(follower3, follower1))
				->
				 <> G(follower1, set_spacing(17))
				 )		
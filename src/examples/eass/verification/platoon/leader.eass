
:name: leader

:Initial Beliefs:

max_length(4) //maximum platoon length
allowed_position(follower1)
platoon_m(leader, follower1)
platoon_m(follower1, follower2)

:Reasoning Rules:
last_vehicle(Y):- platoon_m(X,Y), ~platoon_m(Y,Z);
no_platoon_m(X):- ~platoon_m(X, Y), ~platoon_m(Z, X); 
platoon_full(X):- max_length(X), max_length(2), 
				  platoon_m(I,J),
				  platoon_m(J,K),
				  last_vehicle(K);
				  
platoon_full(X):- max_length(X), max_length(3), 
				  platoon_m(I,J),
				  platoon_m(J,K),
				  platoon_m(K,L),
				  last_vehicle(L);

platoon_full(X):- max_length(X), max_length(4), 
				  platoon_m(I,J),
				  platoon_m(J,K),
				  platoon_m(K,L),
				  platoon_m(L,M),
				  last_vehicle(M);


:Initial Goals:

:Plans:

/* Default plans for handling messages */
+.received(:tell, B): {True} <- +B;   


//=================================== leader receives a joining request, the requested position is allowed and front vehicle is part of platoon ================
+message(SENDER, REQ, FRONT): {REQ ==1,
							  B max_length(X),
							  ~B platoon_full(X),
							  B no_platoon_m(SENDER), 
							  ~B request_to_join(SENDER),  
							  B allowed_position(FRONT), 
							  ~B no_platoon_m(FRONT),
  							  ~G platoon_m(I,J) [achieve],
  							  ~G last_vehicle(K) [achieve]} 
							  <- 
							  +.lock,
							  -message(SENDER, REQ, FRONT),
							  -set_spacing_from(FRONT), -spacing_17(FRONT),
							  -message(SENDER, 2),
							  -agr_sent(SENDER),
							  -.lock,
							  +!platoon_m(SENDER, FRONT) [achieve];
							  

//=================================== leader receives a joining request, joining from behind ================
+message(SENDER, REQ, FRONT): {REQ == 1,
  							  B max_length(X),
  							  ~B platoon_full(X),
  							  B no_platoon_m(SENDER), 
 							  ~B request_to_join(SENDER),  
  							  B allowed_position(FRONT), 
  							  FRONT== 0,
  							  ~G platoon_m(I,J) [achieve],
  							  ~G last_vehicle(K) [achieve]} 
  							  <- 
							  +.lock,
							  -message(SENDER, REQ, FRONT),
							  -set_spacing_from(FRONT), -spacing_17(FRONT),
							  -agr_sent(SENDER),
							  -message(SENDER, 2),
							  -.lock,  							  
  							  +!platoon_m(SENDER, FRONT) [achieve];
  							  
// ==== fail to join due to being full
+message(SENDER, REQ, FRONT): {REQ == 1,
							  B max_length(X),
							  B platoon_full(X)}
							  <-
							  -message(SENDER, REQ, FRONT),
							  .send(SENDER, :tell, full_platoon);
							  

//=================================== leader receives a joining request, the requested position is allowed but front vehicle is not part of platoon ================
+message(SENDER, REQ, FRONT): {REQ ==1, 
  							  B no_platoon_m(SENDER), 
  							  ~B request_to_join(SENDER), 
  							  B allowed_position(FRONT), 
  							  B no_platoon_m(FRONT), 
 							  ~ FRONT == 0} 
  							  <- 
  							  +.lock,
							  -message(SENDER, REQ, FRONT),
							  -message(SENDER,2),
							  -set_spacing_from(front),
							  -spacing_17(FRONT),
							  -agr_sent(SENDER),
							  -.lock,
							  .send(SENDER, :tell, wrong_front);
  							 
//=================================== leader receives a joining request, the requested position is not allowed ================
+message(SENDER, REQ, FRONT): {REQ == 1, 
  							  B no_platoon_m(SENDER), 
  							  ~B request_to_join(SENDER), 
  							  ~B allowed_position(FRONT)} 
  							  <-
  							  +.lock,
  							  -message(SENDER, REQ, FRONT),
  							  -message(SENDER,2),
  							  -set_spacing_from(FRONT),
  							  -spacing_17(FRONT),
  							  -agr_sent(SENDER),
  							  -.lock,
  							  .send(SENDER, :tell, wrong_front);
  							  
// ==== for trouble shooting ======
+message(SENDER, REQ, FRONT): {REQ == 1,
							  ~B no_platoon_m(SENDER)} 
							  <- 
							  -message(SENDER, REQ, FRONT);
 							  							  
+message(SENDER, REG, FRONT): {REQ ==1}
							<- -message(SENDER, REQ, FRONT);

							
// ============== SENDER request to join to platoon and leader sets a goal to have SENDER in platoon =================
// set spacing for joining, FRONT vehicle should increase space
+!platoon_m(SENDER, FRONT) [achieve]: {~B spacing_17(FRONT), 
									  ~ FRONT == 0, 
									  B no_platoon_m(SENDER)}
									  <-
									  +.lock, -message(SENDER, REQ, FRONT), -message(SENDER, 2), -.lock,
									  .send(FRONT, :achieve, set_spacing(17)), 
									  *set_spacing_from(FRONT), +spacing_17(FRONT);
							
+!platoon_m(SENDER, FRONT) [achieve]: {FRONT == 0,
									 ~B message(SENDER, 2)}
									 <-
									 .send(SENDER, :tell, join_agreement(SENDER, FRONT)), 
									 *message(SENDER, 2);

+!platoon_m(SENDER, FRONT) [achieve]: {B spacing_17(FRONT), 
									~B agr_sent(SENDER), 
									B no_platoon_m(SENDER)}
									<-
									.send(SENDER, :tell, join_agreement(SENDER, FRONT)), +agr_sent(SENDER),
									*message(SENDER, 2);

+!platoon_m(SENDER, FRONT) [achieve]: {B message(SENDER, 2), B agr_sent(SENDER),
									B platoon_m(X, FRONT)}
									<-
									-set_spacing_from(FRONT), -spacing(17),
									-agr_sent(SENDER),
									.send(SENDER,:tell, platoon_m), 
									.send(FRONT, :achieve, set_spacing(6)),
									*set_spacing_from(FRONT),
									+.lock,
									-platoon_m(X, FRONT), 
									+platoon_m(X, SENDER), 
									+platoon_m(SENDER, FRONT),
									-.lock;

+!platoon_m(SENDER, FRONT) [achieve]: {B message(SENDER, 2), B agr_sent(SENDER),
									FRONT == 0, 
									B last_vehicle(Y)}
									<- 
									-agr_sent(SENDER),
									.send(SENDER,:tell, platoon_m), 
									+platoon_m(Y, SENDER), 
									-!platoon_m(SENDER, FRONT) [achieve];		
							
							
// leaving							
							
						
//============================== leaving ignores if there are a goal of joining ===================
//=================================== leader receives a leaving request from behind================
+message(SENDER, REQ): {REQ == 0, 
						~G platoon_m(X, Y) [achieve],
						~G last_vehicle(J) [achieve], 
						B last_vehicle(SENDER), 
						B platoon_m(J, SENDER)} 
						<-
						+.lock, 
						-message(SENDER, REQ),
						-set_spacing_from(K),
						-spacing_17(K),
						-message(SENDER,2),
						-.lock,
						+!last_vehicle(J) [achieve];

+message(SENDER, REQ): {REQ == 0, 
						~G platoon_m(X, Y) [achieve], 
						~B last_vehicle(SENDER), 
						B platoon_m(J, SENDER), 
						B platoon_m(SENDER, I), 
						B set_spacing_from(K)} 
						<-
						+.lock,
						-message(SENDER, REQ), 
						-set_spacing_from(SENDER), 
						-spacing_17(SENDER),
						-message(SENDER,2),
						-.lock,
						+!platoon_m(J, I) [achieve];

+message(SENDER, REQ): {REQ == 0} <- -message(SENDER, REQ);


// set spacing for leaving, leaving vehicle should increase space
+!platoon_m(X, Y) [achieve]: {B platoon_m(X, SENDER),
							~B spacing_17(SENDER)}
							 <-
							 +.lock,
							 -message(SENDER, 0),
							 -message(SENDER, 2),
							 -.lock,
							 .send(SENDER, :achieve, set_spacing(17)), 
							 *set_spacing_from(SENDER),
							 +spacing_17(SENDER);


// === particularly for leaving
+!platoon_m(X, Y) [achieve]: {B platoon_m(X, SENDER), 
							 B spacing_17(SENDER), 
							 ~B steering_contr_disabled(Y)} 
							 <-
							 +.lock,
							 -message(SENDER, 0),
							 -message(SENDER, 2),
							 -.lock,
						     .send(Y, :perform, steering_contr(0)), 
						     +steering_contr_disabled(Y);


+!platoon_m(X, Y) [achieve]: {B steering_contr_disabled(Y),  
							 B platoon_m(X, SENDER), 
							 ~B message(SENDER, 2)}
							 <-
							.send(SENDER, :tell, leave_agreement(SENDER)), 
							*message(SENDER, 2);

+!platoon_m(X, Y) [achieve]: {B platoon_m(X, SENDER), 
							 B message(SENDER, 2)}
							 <- 
							.send(SENDER, :tell, no_platoon_m),
							.send(Y, :perform, steering_contr(1)),
							+.lock,
							-steering_contr_disabled(Y),
							-set_spacing_from(SENDER),
							-spacing_17(SENDER),
							-platoon_m(X, SENDER), 
							-platoon_m(SENDER, Y), 
							+platoon_m(X, Y), 
							-.lock;

// ================== leaving from the behind
+!last_vehicle(J) [achieve]: {B platoon_m(J, SENDER), 
							 B last_vehicle(SENDER), 
							 ~B spacing_17(SENDER)}
							 <-
							 +.lock,
							 -message(SENDER, 0),
							 -message(SENDER, 2),
							 -.lock,
							 .send(SENDER, :achieve, set_spacing(17)), 
							 *set_spacing_from(SENDER),
							 +spacing_17(SENDER);

+!last_vehicle(J) [achieve]: {B platoon_m(J, SENDER), 
							 B last_vehicle(SENDER),
							 B spacing_17(SENDER),
							 ~B message(SENDER, 2)}
							 <-
							 .send(SENDER, :tell, leave_agreement(SENDER)), 
							*message(SENDER, 2);
							
+!last_vehicle(J) [achieve]: {B platoon_m(J, SENDER), 
							 B last_vehicle(SENDER),
							 B set_spacing_from(SENDER),
							 B message(SENDER, 2)}
							 <-
							 +.lock,
							 -message(SENDER, 0),
							 -message(SENDER, 2),
							 -set_spacing_from(SENDER),
							 -spacing_17(SENDER),
							 -.lock,
							 .send(SENDER, :tell, no_platoon_m),
							 -platoon_m(J, SENDER);
		 						
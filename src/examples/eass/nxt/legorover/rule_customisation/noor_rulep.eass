// ----------------------------------------------------------------------------
// Copyright (C) 2012 Louise A. Dennis, and  Michael Fisher 
//
// This file is part of the Engineering Autonomous Space Software (EASS) Library.
// 
// The EASS Library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3 of the License, or (at your option) any later version.
// 
// The EASS Library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with the EASS Library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
// 
// To contact the authors:
// http://www.csc.liv.ac.uk/~lad
//
//----------------------------------------------------------------------------
EASS

:abstraction: noor

:Initial Beliefs:

distance_threshold(50)
sound_threshold(50)
light_threshold(50)


:Initial Goals:

:Plans:
/* Default plans for handling messages */
+.received(:tell, B): {True} <- +B;   
+.received(:perform, G): {True} <- +!G [perform];
+.received(:achieve, G): {True} <- +!G [achieve];

+distance(D) : {~B obstacle, B distance_threshold(V), D < V} <- assert_shared(obstacle);
+distance(D) : {B obstacle, B distance_threshold(V), V < D} <- remove_shared(obstacle);

+bump : {~B obstacle_at_back} <- assert_shared(obstacle_at_back);
-bump : {B obstacle_at_back} <- remove_shared(obstacle_at_back);

+sound(S) : {~B sound, B sound_threshold(T), S < T} <- assert_shared(sound);
+sound(S) : {B sound, B sound_threshold(T), T < S} <- remove_shared(sound);

+light(L) : {~B mineral, B light_threshold(T), L < T} <- assert_shared(mineral);
+light(L) : { B mineral, B light_threshold(T), T < L} <- remove_shared(mineral);

+! stop [perform] : {True} <-
	stop;
+! right90 [perform] : {True} <-
    right90;
+! backward10 [perform] : {True} <-
    backward10;
+! forward10 [perform] : {True} <-
    forward10;
+! left90 [perform] : {True} <-
    left90;
+! forward [perform] : {True} <-
    forward;

+change_distance(D) : {B distance_threshold(D1)} <-
    ±distance_threshold(D);
+change_volume(D) : {B sound_threshold(D1)} <-
    ±sound_threshold(D);
+change_intensity(D) : {B light_threshold(D1)} <-
    ±light_threshold(D);

:name: noor

:Initial Beliefs:

:Belief Rules:

:Initial Goals:

:Plans:

+obstacle : {B obstaclerule(R), B active(R), B rule(R, act1, A), B rule(R, act2, B)} <-
    perf(A),
    perf(B);
+obstacle_at_back : {B bumprule(R), B active(R), B rule(R, act1, A), B rule(R, act2, B)} <-
    perf(A),
    perf(B);
+sound : {B soundrule(R), B active(R), B rule(R, act1, A), B rule(R, act2, B)} <-
    perf(A),
    perf(B);
+mineral : {B mineralrule(R), B active(R), B rule(R, act1, A), B rule(R, act2, B)} <-
    perf(A),
    perf(B);
+obstacle : {B obstaclerule(R), B active(R), B rule(R, act1, A), ~B rule(R, act2, B)} <-
    perf(A);
+obstacle_at_back : {B bumprule(R), B active(R), B rule(R, act1, A), ~B rule(R, act2, B)} <-
    perf(A);
+sound : {B soundrule(R), B active(R), B rule(R, act1, A), ~B rule(R, act2, B)} <-
    perf(A);
+mineral : {B mineralrule(R), B active(R), B rule(R, act1, A), ~B rule(R, act2, B)} <-
    perf(A);
    

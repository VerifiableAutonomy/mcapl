// ----------------------------------------------------------------------------
// Copyright (C) 2013 Louise A. Dennis, and Michael Fisher
// 
// This file is part of the Engineering Autonomous Space Software (EASS) Library.
// 
// The EASS Library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3 of the License, or (at your option) any later version.
// 
// The EASS Library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with the EASS Library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
// 
// To contact the authors:
// http://www.csc.liv.ac.uk/~lad
//
//----------------------------------------------------------------------------

EASS

:abstraction: ag1

:Initial Beliefs:

:Initial Goals:

:Plans:
+.received(:tell, B): {True} <- +B;
+.received(:perform, G): {True} <- +!G [perform];

+!set_goal[perform]: {True} <- assert_shared(at_speed_limit), assert_shared(driver_brakes);
+!brake[perform]: {True} <- remove_shared(driver_brakes), assert_shared(safe_and_slow);

:name: ag1 

:Initial Beliefs: 
			
hold(block1)
			
:Initial Goals: 

random[perform]
			
:Plans: 

+! random [perform] : {True} <-
       assert_shared(at_speed_limit),
       remove_shared(at_speed_limit);

+! at_speed_limit [achieve] : {B hold(block1)} <-
       -hold(block1),
       assert_shared(at_speed_limit),
       +.lock, remove_shared(at_speed_limit), assert_shared(driver_brakes), -.lock;
+! at_speed_limit [achieve] : {B safe} <-
       +! bad_subgoal [perform];

+! bad_subgoal [perform]: {~G at_speed_limit [achieve]} <-
       + bad,
       +at_speed_limit;
+! bad_subgoal [perform]: {G at_speed_limit [achieve]} <-
       +at_speed_limit;

+driver_brakes: {B driver_brakes} <- +.lock, assert_shared(safe), assert_shared(at_speed_limit), remove_shared(driver_brakes), -.lock;

-at_speed_limit: {~G at_speed_limit [achieve], ~B at_speed_limit} <-
        +! at_speed_limit[achieve];
